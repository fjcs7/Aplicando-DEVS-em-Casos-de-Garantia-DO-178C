add library
<%
	import java.util.List;
	import Models.utils.rollModes.FeedbackRoll;
	import Models.utils.types.CmdJoystick;
	import Models.utils.files.ReadFiles;
	import Models.utils.files.WriteFiles;
%>!

A CmdJoystick has a value!
the range of CmdJoystick's value is CmdJoystick!
A FeedbackRoll has a value!
the range of FeedbackRoll's value is FeedbackRoll!
A CmdOnOff has a value!
the range of CmdOnOff's value is Boolean!

use sendCommand with type CmdJoystick and default "new CmdJoystick()"!
use feedbackRollMeasure with type FeedbackRoll and default "new FeedbackRoll()"!
use writeFile with type WriteFiles and default "new WriteFiles(\"c:\\\\TesteSimulator\",\"MeasureCommands.csv\")"!
use index with type int and default "0"!
use listText with type List<String>!
use sendedCommand with type String!

accepts input on FeedbackRoll with type FeedbackRoll!
 
generates output on CmdJoystick with type CmdJoystick!
generates output on CmdOnOff with type CmdOnOff!


to start hold in InitialState for time 0.0!
from InitialState go to SendOnOffFMSCommand!

passivate in WaitFeedbackRoll!
when in WaitFeedbackRoll and receive FeedbackRoll go to SendNormalCommand!

hold in SendOnOffFMSCommand for time 0.0!
after SendOnOffFMSCommand output CmdOnOff!
from SendOnOffFMSCommand go to SendNormalCommand!

hold in SendNormalCommand for time 0.0!
after SendNormalCommand output FeedbackRoll!
from SendNormalCommand go to WaitFeedbackRoll!

internal event for InitialState
<%
	ReadFiles archive = new ReadFiles("PilotCommands2.txt");
	writeFile.writeInFile("s_Right;s_Left;s_Up;s_Down;s_hasWarning;m_Right;m_Left;m_Up;m_Down;m_hasWarning");
	listText = archive.ReadAllFileInListFromPackage();
%>!

output event for SendOnOffFMSCommand
<%
	CmdOnOff cmdOnOffFms = new CmdOnOff(true);
	output.add(outCmdOnOff, cmdOnOffFms);		
%>!

external event for WaitFeedbackRoll with FeedbackRoll
<%
	feedbackRollMeasure = (FeedbackRoll)messageList.get(0).getData();
	writeFile.writeInFile(feedbackRollMeasure.measureExecutedRoll(sendedCommand));
	index++;
%>!

output event for SendNormalCommand
<%	
	if(listText.size() > index){
		sendedCommand = listText.get(index);
		sendCommand = CmdJoystick.parseStringToCmdJoystick(sendedCommand);
		output.add(outCmdJoystick, sendCommand);	
	} else {
		if(options.isDisableViewer()){
			getSimulator().getSimulation().stopSimulation();
		}
	}
	
%>!

add library
<%
	import Models.utils.types.*;
	import Models.utils.types.ExecutedCmd;
	import Models.utils.types.YawAngle;
%>!

A YawAngle has a value!
the range of YawAngle's value is YawAngle!
A ExecutedCmd has a value!
the range of ExecutedCmd's value is ExecutedCmd!
A AngleLeft has a value!
the range of AngleLeft's value is Double!
A AngleExecution has a value!
the range of AngleExecution's value is Double!

accepts input on AngleLeft !
accepts input on ExecutedCmd !

generates output on YawAngle !
generates output on AngleExecution !

use receivedCmdAngle with type AngleExecution!
use angleActualMeasure with type YawAngle!

Initialize variables
<%
	receivedCmdAngle = new AngleExecution(0.0);
	angleActualMeasure = new YawAngle(EnumWingSide.LEFT,0.0);
%>!

to start passivate in InitialState!
when in InitialState and receive AngleLeft go to SendYawAngleLeft!
when in InitialState and receive ExecutedCmd go to SendActualAngleLeft!

hold in SendYawAngleLeft for time 0!
after SendYawAngleLeft output AngleExecution!
from SendYawAngleLeft go to InitialState!

hold in SendActualAngleLeft for time 0!
after SendActualAngleLeft output YawAngle!
from SendActualAngleLeft go to InitialState!

external event for InitialState with AngleLeft
<%
	AngleLeft angle = (AngleLeft)messageList.get(0).getData();
	receivedCmdAngle = new AngleExecution(angle.getValue());
%>!

output event for SendYawAngleLeft
<%
	output.add(outAngleExecution, receivedCmdAngle);		
%>!

external event for InitialState with ExecutedCmd
<%
	ExecutedCmd cmd = (ExecutedCmd)messageList.get(0).getData();
	if(cmd.isExecuted()){
		angleActualMeasure.setAngleYaw(cmd.getExecAngle());
	}
%>!

output event for SendActualAngleLeft
<%
	output.add(outYawAngle, angleActualMeasure);		
%>!
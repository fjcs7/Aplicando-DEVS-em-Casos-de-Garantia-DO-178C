add Library
<%
	import Models.utils.types.CmdJoystick;
	import Models.utils.rollModes.FeedbackRoll;
	import Models.utils.rollModes.RollMode;
%>!

A CmdJoystick has a value!
the range of CmdJoystick's value is CmdJoystick!
A FeedbackRoll has a value!
the range of FeedbackRoll's value is FeedbackRoll!
A CmdOnOff has a value!
the range of CmdOnOff's value is Boolean!

use sendCommand with type CmdJoystick!
use measureFeedback with type FeedbackRoll!
use isTurnedOn with type Boolean!
use rollMode with type RollMode!

Initialize variables
<%
	sendCommand = new CmdJoystick();
	measureFeedback = new FeedbackRoll();
	isTurnedOn = false;
	rollMode = new RollMode();
%>!

accepts input on FeedbackRoll with type FeedbackRoll!
accepts input on CmdOnOff with type CmdOnOff!
accepts input on CmdJoystick with type CmdJoystick!

generates output on CmdJoystick with type CmdJoystick!
generates output on FeedbackRoll with type FeedbackRoll!

to start passivate in InitialState!
when in InitialState and receive CmdOnOff go to HandlingCmdOnOffReceived!
when in InitialState and receive CmdJoystick go to SendJoystickCommand!
when in InitialState and receive FeedbackRoll go to MeasureFeedbackRoll!

hold in HandlingCmdOnOffReceived for time 0.0!
from HandlingCmdOnOffReceived go to InitialState!

hold in SendJoystickCommand for time 0.0!
after SendJoystickCommand output CmdJoystick!
from SendJoystickCommand go to InitialState!

hold in MeasureFeedbackRoll for time 0.0!
after MeasureFeedbackRoll output FeedbackRoll!
from MeasureFeedbackRoll go to InitialState!

external event for InitialState with CmdOnOff
<%
	isTurnedOn = ((CmdOnOff)messageList.get(0).getData()).isValue();
	rollMode.setCmdFmsOnOff(isTurnedOn);
%>!

external event for InitialState with CmdJoystick
<%
	sendCommand = rollMode.measureJoystickCommand((CmdJoystick)messageList.get(0).getData());
%>!

external event for InitialState with FeedbackRoll
<%
	measureFeedback = (FeedbackRoll)messageList.get(0).getData();
%>!

output event for SendJoystickCommand
<%
	output.add(outCmdJoystick, sendCommand);		
%>!

output event for MeasureFeedbackRoll
<%
	measureFeedback.getRollMode().setCmdFmsOnOff(isTurnedOn);
	rollMode = measureFeedback.getRollMode();
	measureFeedback.getRollWarning().measureWarning();
	output.add(outFeedbackRoll, measureFeedback);		
%>!
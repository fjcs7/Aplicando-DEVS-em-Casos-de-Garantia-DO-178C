add library
<%
	import Models.utils.ExecutedCmd;
%>!

A ExecutedCmd has a value!
the range of ExecutedCmd's value is ExecutedCmd!
A YawAngleRight has a value!
the range of YawAngleRight's value is Double!
A AngleRight has a value!
the range of AngleRight's value is Double!
A AngleExecution has a value!
the range of AngleExecution's value is Double!

accepts input on AngleRight !
accepts input on ExecutedCmd !

generates output on YawAngleRight !
generates output on AngleExecution !

use receivedCmdAngle with type AngleExecution!
use angleActualMeasure with type YawAngleRight!

Initialize variables
<%
	receivedCmdAngle = new AngleExecution(0.0);
	angleActualMeasure = new YawAngleRight(0.0);
%>!

to start passivate in InitialState !
when in InitialState and receive AngleRight go to SendYawAngleRight!
when in InitialState and receive ExecutedCmd go to SendActualAngleRight!

hold in SendYawAngleRight for time 0!
after SendYawAngleRight output AngleExecution!
from SendYawAngleRight go to InitialState!

hold in SendActualAngleRight for time 0!
after SendActualAngleRight output AngleExecution!
from SendActualAngleRight go to InitialState!

external event for InitialState with AngleRight
<%
	AngleRight angle = (AngleRight)messageList.get(0).getData();
	receivedCmdAngle = new AngleExecution(angle.getValue());
%>!

output event for SendYawAngleRight
<%
	output.add(outAngleExecution, receivedCmdAngle);		
%>!

external event for InitialState with ExecutedCmd
<%
	ExecutedCmd cmd = (ExecutedCmd)messageList.get(0).getData();
	if(cmd.isExecuted()){
		angleActualMeasure = new YawAngleRight(angleActualMeasure.getValue() + cmd.getExecAngle());
	}
%>!

output event for SendActualAngleRight
<%
	output.add(outYawAngleRight, angleActualMeasure);		
%>!